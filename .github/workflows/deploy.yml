name: 🚀 Deploy Chacharitas to Production

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      SSH_AUTH_SOCK: /tmp/ssh_agent.sock

    steps:
      # 1) Checkout del código
      - name: Checkout code
        uses: actions/checkout@v4

      # 2) Configurar SSH Agent con passphrase
      - name: Setup SSH agent with passphrase
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          SSH_PASSPHRASE: ${{ secrets.SSH_PASSPHRASE }}
          SSH_HOST: ${{ secrets.SSH_HOST }}
        run: |
          # Inicia el agente en el socket definido
          ssh-agent -a "$SSH_AUTH_SOCK" > /dev/null

          # Crea un pequeño helper que devuelva la passphrase
          echo 'echo $SSH_PASSPHRASE' > ~/.ssh_askpass
          chmod +x ~/.ssh_askpass

          # Añade tu clave al agente usando SSH_ASKPASS
          echo "$SSH_PRIVATE_KEY" | tr -d '\r' \
            | DISPLAY=none SSH_ASKPASS=~/.ssh_askpass ssh-add - > /dev/null

          # Comprueba que quedó cargada
          ssh-add -l

          # Guarda la huella de tu host para no preguntar luego
          mkdir -p ~/.ssh
          ssh-keyscan -H "$SSH_HOST" >> ~/.ssh/known_hosts

      # 3) Conectar por SSH y desplegar
      - name: SSH Deploy Laravel Application
        env:
          SSH_HOST: ${{ secrets.SSH_HOST }}
          SSH_USER: ${{ secrets.SSH_USER }}
        run: |
          ssh -o StrictHostKeyChecking=no $SSH_USER@$SSH_HOST << 'EOF'
            set -e
            
            # Variables de configuración
            APP_DIR="/var/www/html/chacharitas"
            TIMESTAMP=$(date +%Y%m%d_%H%M%S)
            
            echo "🚀 Iniciando deployment de Chacharitas..."
            
            # Crear backup si existe la aplicación
            if [ -d "$APP_DIR" ]; then
              echo "📦 Creando backup..."
              mkdir -p $HOME/backups/chacharitas
              cp -r $APP_DIR $HOME/backups/chacharitas/backup_$TIMESTAMP
              echo "✅ Backup creado en $HOME/backups/chacharitas/backup_$TIMESTAMP"
            fi
            
            # Navegar al directorio de la aplicación
            cd $APP_DIR
            
            # Poner la aplicación en modo mantenimiento
            echo "🔧 Activando modo mantenimiento..."
            php artisan down --retry=60 || true
            
            # Actualizar código desde Git
            echo "📥 Actualizando código desde repositorio..."
            git fetch --all
            git reset --hard origin/main
            git clean -fd
            
            # Instalar dependencias de Composer
            echo "📦 Instalando dependencias de PHP..."
            composer install --optimize-autoloader --no-dev --no-interaction
            
            # Instalar dependencias de Node.js y compilar assets
            if [ -f "package.json" ]; then
              echo "📦 Instalando dependencias de Node.js..."
              npm ci --production
              
              echo "🏗️ Compilando assets..."
              npm run build
            fi
            
            # Configurar permisos (el usuario deploy ya es propietario, solo ajustamos permisos específicos)
            echo "🔐 Configurando permisos..."
            chmod -R 755 $APP_DIR
            chmod -R 775 $APP_DIR/storage $APP_DIR/bootstrap/cache
            
            # Asegurar que www-data tenga acceso a storage y cache
            sudo chgrp -R www-data $APP_DIR/storage $APP_DIR/bootstrap/cache
            
            # Limpiar caché antes de los comandos
            echo "🧹 Limpiando caché..."
            php artisan config:clear
            php artisan cache:clear
            php artisan route:clear
            php artisan view:clear
            
            # Ejecutar migraciones
            echo "🗄️ Ejecutando migraciones..."
            php artisan migrate --force
            
            # Crear caché optimizado
            echo "⚡ Creando caché optimizado..."
            php artisan config:cache
            php artisan route:cache
            php artisan view:cache
            
            # Reiniciar servicios
            echo "🔄 Reiniciando servicios..."
            sudo systemctl restart php8.2-fpm
            sudo nginx -t && sudo systemctl reload nginx
            
            # Desactivar modo mantenimiento
            echo "✅ Desactivando modo mantenimiento..."
            php artisan up
            
            echo "🎉 Deployment completado exitosamente!"
            echo "🌐 Chacharitas está disponible en https://chacharitas.org"
          EOF
