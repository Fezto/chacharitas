name: üöÄ Deploy Chacharitas to Production

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      SSH_AUTH_SOCK: /tmp/ssh_agent.sock

    steps:
      # 1) Checkout del c√≥digo
      - name: Checkout code
        uses: actions/checkout@v4

      # 2) Setup SSH agent con passphrase (M√©todo alternativo con password)
      - name: Setup SSH connection
        env:
          SSH_HOST: ${{ secrets.SSH_HOST }}
          SSH_USER: ${{ secrets.SSH_USER }}
          SSH_PASSWORD: ${{ secrets.SSH_PASSWORD }}
        run: |
          # Instalar sshpass para autenticaci√≥n por contrase√±a
          sudo apt-get update
          sudo apt-get install -y sshpass

          # Agregar host a known_hosts
          mkdir -p ~/.ssh
          ssh-keyscan -H "$SSH_HOST" >> ~/.ssh/known_hosts

      # 3) Conectar por SSH y desplegar (usando contrase√±a)
      - name: SSH Deploy Laravel Application
        env:
          SSH_HOST: ${{ secrets.SSH_HOST }}
          SSH_USER: ${{ secrets.SSH_USER }}
          SSH_PASSWORD: ${{ secrets.SSH_PASSWORD }}
        run: |
          sshpass -p "$SSH_PASSWORD" ssh -o StrictHostKeyChecking=no $SSH_USER@$SSH_HOST << 'EOF'
            set -e
            
            # Variables de configuraci√≥n
            APP_DIR="/var/www/chacharitas"
            BACKUP_DIR="/var/backups/chacharitas"
            TIMESTAMP=$(date +%Y%m%d_%H%M%S)
            
            echo "üöÄ Iniciando deployment de Chacharitas..."
            
            # Crear backup si existe la aplicaci√≥n
            if [ -d "$APP_DIR" ]; then
              echo "üì¶ Creando backup..."
              sudo mkdir -p $BACKUP_DIR
              sudo cp -r $APP_DIR $BACKUP_DIR/backup_$TIMESTAMP
              echo "‚úÖ Backup creado en $BACKUP_DIR/backup_$TIMESTAMP"
            fi
            
            # Navegar al directorio de la aplicaci√≥n
            cd $APP_DIR
            
            # Poner la aplicaci√≥n en modo mantenimiento
            echo "üîß Activando modo mantenimiento..."
            php artisan down --retry=60 || true
            
            # Actualizar c√≥digo desde Git
            echo "üì• Actualizando c√≥digo desde repositorio..."
            git fetch --all
            git reset --hard origin/main
            git clean -fd
            
            # Instalar dependencias de Composer
            echo "üì¶ Instalando dependencias de PHP..."
            composer install --optimize-autoloader --no-dev --no-interaction
            
            # Instalar dependencias de Node.js y compilar assets
            if [ -f "package.json" ]; then
              echo "üì¶ Instalando dependencias de Node.js..."
              npm ci --production
              
              echo "üèóÔ∏è Compilando assets..."
              npm run build
            fi
            
            # Configurar permisos (el usuario deploy ya es propietario, solo ajustamos permisos espec√≠ficos)
            echo "üîê Configurando permisos..."
            chmod -R 755 $APP_DIR
            chmod -R 775 $APP_DIR/storage $APP_DIR/bootstrap/cache
            
            # Asegurar que www-data tenga acceso a storage y cache
            sudo chgrp -R www-data $APP_DIR/storage $APP_DIR/bootstrap/cache
            
            # Limpiar cach√© antes de los comandos
            echo "üßπ Limpiando cach√©..."
            php artisan config:clear
            php artisan cache:clear
            php artisan route:clear
            php artisan view:clear
            
            # Ejecutar migraciones
            echo "üóÑÔ∏è Ejecutando migraciones..."
            php artisan migrate --force
            
            # Crear cach√© optimizado
            echo "‚ö° Creando cach√© optimizado..."
            php artisan config:cache
            php artisan route:cache
            php artisan view:cache
            
            # Reiniciar servicios
            echo "üîÑ Reiniciando servicios..."
            sudo systemctl restart php8.2-fpm
            sudo nginx -t && sudo systemctl reload nginx
            
            # Desactivar modo mantenimiento
            echo "‚úÖ Desactivando modo mantenimiento..."
            php artisan up
            
            echo "üéâ Deployment completado exitosamente!"
            echo "üåê Chacharitas est√° disponible en https://chacharitas.org"
          EOF
